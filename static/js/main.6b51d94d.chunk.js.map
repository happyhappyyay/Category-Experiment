{"version":3,"sources":["images/silhouette.svg","images/silhouette-add.svg","images/silhouette-remove.svg","component/Island/Island.jsx","helpers/phases.js","helpers/IslanderLogic.js","component/DisplayItem/DisplayItem.jsx","component/Display/feedbackHelper.js","helpers/feedback.js","component/Display/Display.jsx","component/ProgressBar/ProgressBar.jsx","component/ProgressBar/progCalc.js","component/Header/Header.jsx","component/Footer/Footer.jsx","component/Introduction/Introduction.jsx","component/Results/resultsParser.jsx","component/Results/Results.jsx","component/Explanation/Explanation.jsx","component/Frame/Frame.jsx","index.js"],"names":["module","exports","Island","island","stage","update","islandName","checkImplicit","className","onClick","includes","IslanderLogic","this","dimension","Math","round","random","islandRandomization","randomizedUnimodalSize","randomizedBimodalSize","max","min","DIF","DISTR_MID_POINT","MODE_DIST_CNTR_DISTR","floor","SIZE_VARIANCE","normalDistributionSample","u","v","val","sqrt","log","cos","PI","abs","DisplayItem","props","selectRepresentativeQuestion","trial","state","height","width","adjustWidth","bind","adjustHeight","onButtonClick","event","setState","parseInt","target","value","properties","question","personAttributes","personSize","margin","style","src","silhouette","alt","type","MIN_HEIGHT","MAX_HEIGHT","id","onChange","MIN_WIDTH","MAX_WIDTH","React","Component","FeedbackHelper","feedbackAmount","feedbackType","createRandomizedFeedbackType","giveFeedback","color","correct","tempCorrect","Display","implicitTrialStageIncrement","islanderLogic","getDimension","islanderProperties","PHASE_TRIALS","updateStage","updateTrial","implicitClassification1","map","index","implicitClassification2","explicitClassification1","explicitClassification2","feedbackHelper","typeFeedback","updateImplicit","updateExplicit","handleKeyDown","document","addEventListener","removeEventListener","checkForImplicitPhase","key","createSilhouetteProperties","allowFeedback","setupFeedbackColor","setTimeout","EXPLICIT_TRIALS","reverseFeedbackType","arr","concat","updateResults","getFeedbackColor","updateIslander","ProgressBar","overall","prog","rawTrials","calculateOverallProgress","stageTrials","calulateCurrentProgress","boxColor","progBoxes","i","Header","Footer","amtFeedback","stageChange","disableInput","sendFeedbackAmount","amount","querySelector","sendFeedbackType","name","defaultChecked","disabled","backgroundColor","Introduction","ISLAND_1_WIDTH_AVG","ISLAND_2_WIDTH_AVG","ISLAND_1_HEIGHT_AVG","ISLAND_2_HEIGHT_AVG","STANDARD_HEIGHT","STANDARD_WIDTH","ResultsParser","resultsArr","length","island1Cat","island2Cat","boundary","p1Island1Avg","p1Island2Avg","p1ImplBound","findImplicitBoundary","p2Island1Avg","p2Island2Avg","p2ImplBound","exp1Island1","exp1Island2","exp1bound","exp2Island1","exp2Island2","exp2Bound","addSilhouetteImage","addComparisonImage","defaultSize","selectedSize","silhouetteImg","haslargerSilhouette","removeSilhouette","addSilhouette","size","dimText","categoryAvg1","categoryAvg2","categoryDif","avgSize","silhouette1Size","silhouette2Size","Results","results","resultsContent","parseResults","Explanation","Frame","amountFeedback","updateAmountFeedback","updateTypeFeedback","newStage","newTrial","feedback","ReactDOM","render"],"mappings":"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","file":"static/js/main.6b51d94d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/silhouette.b7f928cd.svg\";","module.exports = __webpack_public_path__ + \"static/media/silhouette-add.a3b286a6.svg\";","module.exports = __webpack_public_path__ + \"static/media/silhouette-remove.db519466.svg\";","import React from 'react'\r\nimport './Island.css'\r\nimport * as Phases from '../../helpers/phases'\r\n\r\nconst Island = ({ island, stage, update }) => {\r\n    const ISLAND1 = \"Island 1\";\r\n    const ISLAND2 = \"Island 2\";\r\n\r\n    const handleClick = () => {\r\n        update(island);\r\n    }\r\n    let islandName = island === 0? 'Island1':'Island2';\r\n    const checkImplicit = () =>{\r\n        return !(stage === Phases.EXPLICIT_1 | stage === Phases.EXPLICIT_2 | stage === Phases.EXPLICIT_3);\r\n    }\r\n    return (\r\n        <div \r\n            className={checkImplicit()? \r\n            islandName:\"Island-gone\"} \r\n            onClick={checkImplicit()? handleClick:null}\r\n        >\r\n            <div className={islandName+\"-text\"}>\r\n                {islandName.includes(1)? ISLAND1:ISLAND2}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Island;","export const INTRODUCTION = 0;\r\nexport const TRAINING = 1;\r\nexport const EXPLICIT_1 = 2;\r\nexport const PHASE_1 = 3;\r\nexport const EXPLICIT_2 = 4;\r\nexport const PHASE_2 = 5;\r\nexport const EXPLICIT_3 = 6;\r\nexport const RESULTS = 7;\r\n","import * as Phases from './phases';\r\n\r\nexport const MIN_WIDTH = 8;\r\nexport const MAX_WIDTH = 50;\r\nexport const MIN_HEIGHT = 20;\r\nexport const MAX_HEIGHT = 37;\r\nexport const ISLAND_1 = 0;\r\nexport const ISLAND_2 = 1;\r\nexport const WIDTH_MEASURE = 0;\r\nexport const HEIGHT_MEASURE = 1;\r\n\r\nclass IslanderLogic {\r\n  constructor() {\r\n    this.dimension = Math.round(Math.random());\r\n  }\r\n\r\n  createSilhouetteProperties() {\r\n    const island = IslanderLogic.islandRandomization();\r\n    if (this.dimension === WIDTH_MEASURE) {\r\n      return [this.randomizedUnimodalSize(MAX_WIDTH, MIN_WIDTH, island),\r\n        this.randomizedBimodalSize(MAX_HEIGHT, MIN_HEIGHT, island),\r\n        island];\r\n    }\r\n    return [this.randomizedBimodalSize(MAX_WIDTH, MIN_WIDTH, island),\r\n      this.randomizedUnimodalSize(MAX_HEIGHT, MIN_HEIGHT, island),\r\n      island];\r\n  }\r\n\r\n  static islandRandomization() {\r\n    return Math.round(Math.random());\r\n  }\r\n\r\n  randomizedBimodalSize(max, min, island) {\r\n    const DIF = max - min;\r\n    const DISTR_MID_POINT = (DIF / 2) + min;\r\n    // arbitrary overlap point in MODE_DIST_CNTR_DISTR\r\n    const MODE_DIST_CNTR_DISTR = Math.floor(DIF / 5.5);\r\n    const MAX_STD = 3.5;\r\n    const SIZE_VARIANCE = ((DIF / 2) - MODE_DIST_CNTR_DISTR) / MAX_STD;\r\n\r\n    if (island === ISLAND_1) {\r\n      const size = this.normalDistributionSample() * SIZE_VARIANCE\r\n      + (DISTR_MID_POINT - MODE_DIST_CNTR_DISTR);\r\n      return size;\r\n    }\r\n    const size = this.normalDistributionSample() * SIZE_VARIANCE\r\n    + (DISTR_MID_POINT + MODE_DIST_CNTR_DISTR);\r\n    return size;\r\n  }\r\n\r\n  randomizedUnimodalSize(max, min, island) {\r\n    const DIF = max - min;\r\n    const DISTR_MID_POINT = (DIF / 2) + min;\r\n    const MAX_STD = 3.5;\r\n    const SIZE_VARIANCE = (DIF / 2) / MAX_STD;\r\n\r\n    if (island === ISLAND_1) {\r\n      const size = this.normalDistributionSample() * SIZE_VARIANCE + (DISTR_MID_POINT);\r\n      return size;\r\n    }\r\n    const size = this.normalDistributionSample() * SIZE_VARIANCE + (DISTR_MID_POINT);\r\n    return size;\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/25582882/\r\n  // javascript-math-random-normal-distribution-gaussian-bell-curve/36481059#36481059\r\n  // by maxwell collard\r\n  normalDistributionSample() {\r\n    let u = 0; let\r\n      v = 0;\r\n    while (u === 0) u = Math.random();\r\n    while (v === 0) v = Math.random();\r\n    const val = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n    return Math.abs(val) <= 3.5 ? val : this.normalDistributionSample();\r\n  }\r\n\r\n  static checkForImplicitPhase(stage) {\r\n    return (stage === Phases.TRAINING || stage === Phases.PHASE_1 || stage === Phases.PHASE_2);\r\n  }\r\n\r\n  getDimension() {\r\n    return this.dimension;\r\n  }\r\n}\r\n\r\nexport default IslanderLogic;\r\n","import React from 'react';\r\nimport './DisplayItem.css';\r\nimport silhouette from '../../images/silhouette.svg'; \r\nimport {WIDTH_MEASURE, HEIGHT_MEASURE, MAX_HEIGHT, MIN_HEIGHT,\r\nMIN_WIDTH, MAX_WIDTH} from '../../helpers/IslanderLogic';\r\nimport * as Phases from '../../helpers/phases';\r\n\r\nclass DisplayItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            height: (MAX_HEIGHT-MIN_HEIGHT)/2,\r\n            width: (MAX_WIDTH-MIN_WIDTH)/2,\r\n        }\r\n\r\n        this.adjustWidth = this.adjustWidth.bind(this);\r\n        this.adjustHeight = this.adjustHeight.bind(this);\r\n        this.onButtonClick = this.onButtonClick.bind(this);\r\n        \r\n    }\r\n    adjustHeight(event){\r\n        this.setState({\r\n            height: parseInt(event.target.value)\r\n        });\r\n    }\r\n\r\n    adjustWidth(event){\r\n        this.setState({\r\n            width: parseInt(event.target.value)\r\n        });\r\n    }\r\n\r\n    onButtonClick(){\r\n        this.props.update(this.state.width, this.state.height);\r\n    }\r\n\r\n    selectRepresentativeQuestion = (trial) => {\r\n        const ISLAND1_REP = \"Please, create the silhouette most representative of Island 1.\";\r\n        const ISLAND2_REP = \"Please, create the silhouette most representative of Island 2.\";\r\n        const BOUNDARY_REP = \"Please, create the silhouette most representative of the boundary between the two islands.\";\r\n        const MOST_REP = \"Please create the most repesentative silhouette.\";\r\n        switch(trial){\r\n            case 0:\r\n                return ISLAND1_REP;\r\n            case 1:\r\n                return ISLAND2_REP;\r\n            case 2:\r\n                return BOUNDARY_REP;\r\n            default:\r\n                return MOST_REP;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { stage, trial, properties } = this.props;\r\n\r\n        const question = this.selectRepresentativeQuestion(trial);\r\n        let personAttributes = properties;\r\n        const checkImplicit = () =>{\r\n            return !(stage === Phases.EXPLICIT_1 | stage === Phases.EXPLICIT_2 | stage === Phases.EXPLICIT_3);\r\n        }\r\n        let personSize = checkImplicit()? {\r\n            width: personAttributes[WIDTH_MEASURE] + \"vmin\",\r\n            height: personAttributes[HEIGHT_MEASURE] + \"vmin\"\r\n        }:\r\n        {\r\n            width: this.state.width + \"vmin\",\r\n            height: this.state.height + \"vmin\",\r\n            margin: \"-7vmin 0 0 0\"\r\n        };\r\n        return (\r\n            <div>\r\n                {checkImplicit()? <div></div>:<div><h2 className=\"DisplayItem-explicit-text\">{question}</h2>\r\n                    </div>}\r\n                <div className=\"DisplayItem-silhouette-container\">\r\n                    <img \r\n                        className=\"DisplayItem-silhouette\" \r\n                        style={personSize} \r\n                        src={silhouette}\r\n                        alt=\"silhouette\"> \r\n                    </img>\r\n                </div>\r\n                {checkImplicit()? <div></div>:\r\n                <div>\r\n                    <input \r\n                        type=\"range\" \r\n                        className=\"DisplayItem-vert-range\" \r\n                        min={MIN_HEIGHT - 5} \r\n                        max={MAX_HEIGHT+5} \r\n                        id=\"heightRange\" \r\n                        value={this.state.height} \r\n                        onChange={this.adjustHeight}\r\n                    >\r\n                    </input>\r\n                    <input \r\n                        type=\"range\" \r\n                        className=\"DisplayItem-hor-range\" \r\n                        min={MIN_WIDTH - 5} \r\n                        max={MAX_WIDTH+5} \r\n                        id=\"widthRange\" \r\n                        value={this.state.width} \r\n                        onChange={this.adjustWidth}\r\n                    >\r\n                    </input>\r\n                    <button \r\n                        className=\"DisplayItem-button\" \r\n                        onClick={this.onButtonClick}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayItem;","import { FALSE } from '../../helpers/feedback';\r\n\r\nclass FeedbackHelper {\r\n  constructor(feedbackAmount, feedbackType) {\r\n    this.feedbackAmount = feedbackAmount;\r\n    this.feedbackType = feedbackType === 2\r\n      ? FeedbackHelper.createRandomizedFeedbackType() : feedbackType;\r\n    this.giveFeedback = false;\r\n    this.color = 'black';\r\n  }\r\n\r\n  allowFeedback() {\r\n    this.giveFeedback = (Math.random() * 100) <= this.feedbackAmount;\r\n\r\n    return this.giveFeedback;\r\n  }\r\n\r\n  setupFeedbackColor(correct) {\r\n    let tempCorrect = correct;\r\n    if (this.feedbackType === FALSE) {\r\n      tempCorrect = !correct;\r\n    }\r\n    this.color = tempCorrect ? 'green' : 'red';\r\n  }\r\n\r\n  getFeedbackColor() {\r\n    return this.color;\r\n  }\r\n\r\n  static createRandomizedFeedbackType() {\r\n    return Math.round(Math.random());\r\n  }\r\n\r\n  reverseFeedbackType() {\r\n    this.feedbackType = this.feedbackType === 0 ? 1 : 0;\r\n  }\r\n}\r\n\r\nexport default FeedbackHelper;\r\n","export const UNSUPERVISED = 0;\r\nexport const LOW_SEMI_SUPERVISED = 25;\r\nexport const HI_SEMI_SUPERVISED = 50;\r\nexport const SUPERVISED = 100;\r\nexport const TRUE = 0;\r\nexport const FALSE = 1;\r\nexport const RANDOM = 2;\r\n","import React from 'react';\r\nimport Island from '../Island/Island';\r\nimport DisplayItem from '../DisplayItem/DisplayItem';\r\nimport IslanderLogic from '../../helpers/IslanderLogic';\r\nimport './Display.css';\r\nimport * as Phases from '../../helpers/phases';\r\nimport {EXPLICIT_TRIALS, PHASE_TRIALS} from '../ProgressBar/progCalc';\r\nimport {ISLAND_1, ISLAND_2, WIDTH_MEASURE, HEIGHT_MEASURE} from '../../helpers/IslanderLogic';\r\nimport FeedbackHelper from './feedbackHelper';\r\n\r\nclass Display extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            giveFeedback: false\r\n        };\r\n        this.implicitClassification1 = [0,0];\r\n        this.implicitClassification2 = [0,0];\r\n        this.explicitClassification1 = [0,0,0];\r\n        this.explicitClassification2 = [0,0,0];\r\n        this.islanderLogic = new IslanderLogic();\r\n        this.islanderProperties = [];\r\n        this.feedbackHelper = new FeedbackHelper(this.props.feedbackAmount, this.props.typeFeedback);\r\n        this.updateImplicit = this.updateImplicit.bind(this);\r\n        this.updateExplicit = this.updateExplicit.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", this.handleKeyDown);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    }\r\n\r\n    handleKeyDown(event){\r\n        if(IslanderLogic.checkForImplicitPhase(this.props.stage)){\r\n            if(event.key === '1'){\r\n                this.updateImplicit(ISLAND_1);\r\n            }\r\n            else if(event.key === '2'){\r\n                this.updateImplicit(ISLAND_2);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateIslander(){\r\n        this.islanderProperties = this.islanderLogic.createSilhouetteProperties();\r\n        return this.islanderProperties;\r\n    }\r\n\r\n    updateImplicit(island){\r\n        if(!this.state.giveFeedback){\r\n            if(this.feedbackHelper.allowFeedback()|this.props.stage===Phases.TRAINING){\r\n                this.feedbackHelper.setupFeedbackColor(island===this.islanderProperties[2]);\r\n                this.setState({\r\n                    giveFeedback:true\r\n                })\r\n                setTimeout(()=>this.implicitTrialStageIncrement(island),1000);\r\n            }\r\n            else{\r\n                this.implicitTrialStageIncrement(island);\r\n            }\r\n        }\r\n    }\r\n\r\n    implicitTrialStageIncrement = (island) =>{\r\n            let trial = this.props.trial;\r\n            let value = this.islanderLogic.getDimension() === WIDTH_MEASURE? \r\n            this.islanderProperties[WIDTH_MEASURE]: this.islanderProperties[HEIGHT_MEASURE];\r\n            switch(this.props.stage){\r\n                case Phases.TRAINING:\r\n                    if(trial + 1 === PHASE_TRIALS/5){\r\n                        this.props.updateStage(Phases.EXPLICIT_1);\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                    break;\r\n                case Phases.PHASE_1:\r\n                    this.implicitClassification1 = this.implicitClassification1.map((val,index)=>{\r\n                        switch(index){\r\n                            case 0:\r\n                                return island!==ISLAND_1? val:val > 0? (val + value)/2:value;\r\n                            case 1:\r\n                                return island===ISLAND_1? val:val > 0? (val + value)/2:value;\r\n                            default:\r\n                                return val;\r\n                        }\r\n                    })\r\n                    if(trial + 1 === PHASE_TRIALS/2.5){\r\n                        this.props.updateStage(Phases.EXPLICIT_2);\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                    break;\r\n                case Phases.PHASE_2:\r\n                    this.implicitClassification2 = this.implicitClassification2.map((val,index)=>{\r\n                        switch(index){\r\n                            case 0:\r\n                                return island!==ISLAND_1? val:val > 0? (val + value)/2:value;\r\n                            case 1:\r\n                                return island===ISLAND_1? val:val > 0? (val + value)/2:value;\r\n                            default:\r\n                                return val;\r\n                        }\r\n                    })\r\n                    if(trial + 1 === PHASE_TRIALS/2.5){\r\n                        this.props.updateStage(Phases.EXPLICIT_3);\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            this.setState({giveFeedback:false});\r\n\r\n    }\r\n\r\n    updateExplicit(width, height){\r\n        let trial = this.props.trial;\r\n        let value =  this.islanderLogic.getDimension() === WIDTH_MEASURE? \r\n        width: height;\r\n        switch(this.props.stage){\r\n            case Phases.EXPLICIT_1:\r\n                    if(trial + 1 === EXPLICIT_TRIALS/3){\r\n                        this.props.updateStage(Phases.PHASE_1);\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                break;\r\n            case Phases.EXPLICIT_2:\r\n                    this.explicitClassification1 = this.explicitClassification1\r\n                    .map((val,index)=>{ return index === trial? value:val;\r\n                });\r\n                    if(trial + 1 === EXPLICIT_TRIALS/3){\r\n                        if(this.props.typeFeedback === 2) this.feedbackHelper.reverseFeedbackType();\r\n                        this.props.updateStage(Phases.PHASE_2);\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                break;\r\n            case Phases.EXPLICIT_3:\r\n                    this.explicitClassification2 = this.explicitClassification2\r\n                        .map((val,index)=>{ return index === trial? value:val;\r\n                    });\r\n                    if(trial + 1 === EXPLICIT_TRIALS/3){\r\n                        let arr = this.implicitClassification1.concat(this.implicitClassification2,\r\n                            this.explicitClassification1,this.explicitClassification2);\r\n                        this.props.updateResults(arr,this.islanderLogic.getDimension());\r\n                    }\r\n                    else{\r\n                        this.props.updateTrial(trial + 1);\r\n                    }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render(){\r\n        const { stage, trial } = this.props;\r\n        const CORRECT_COLOR = \"green\";\r\n        const CORRECT = \"correct\";\r\n        const INCORRECT = \"incorrect\";\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"Display-container\">\r\n                    <Island \r\n                        island={0} \r\n                        stage={stage} \r\n                        update={this.updateImplicit}\r\n                    />\r\n                        {this.state.giveFeedback? \r\n                    <div className=\"DisplayItem-silhouette-container\">\r\n                        <div \r\n                            className=\"DisplayItem-feedback\" \r\n                            style={{color:this.feedbackHelper.getFeedbackColor()}}\r\n                            >\r\n                            {this.feedbackHelper.getFeedbackColor() === CORRECT_COLOR? CORRECT:INCORRECT}\r\n                        </div>\r\n                    </div>:\r\n                    <DisplayItem \r\n                        stage = {stage} \r\n                        trial={trial} \r\n                        properties={this.updateIslander()} \r\n                        update={this.updateExplicit} \r\n                    />}\r\n                    <Island \r\n                        island={1} \r\n                        stage={stage} \r\n                        update={this.updateImplicit}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n  \r\n  export default Display;","import React from 'react';\r\nimport './ProgressBar.css';\r\nimport {calculateOverallProgress, calulateCurrentProgress} from './progCalc';\r\n\r\nconst ProgressBar = ({overall, stage, trial}) => {\r\n    let prog = overall === true? calculateOverallProgress(stage, trial):\r\n    calulateCurrentProgress(stage, trial);\r\n\r\n    let boxColor = overall === true? \"green-boxes\":\"blue-boxes\";\r\n    let progBoxes = [];\r\n    \r\n    for (let i = 0; i<prog; i++){\r\n        progBoxes[i] = <div className={boxColor} key={i}></div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"prog\">\r\n            <div className = \"header-progress-text\">\r\n                {overall === true? \"Overall Progess:\":\"Current Progress:\"}\r\n            </div> \r\n            {progBoxes}\r\n            <div className=\"progress-percent\">{prog}%</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;","import * as Phases from '../../helpers/phases';\r\n\r\nexport const PHASE_TRIALS = 100;\r\nexport const EXPLICIT_TRIALS = 9;\r\n\r\nexport const calculateOverallProgress = (stage, trial) => {\r\n  const TOTAL_TRIALS = PHASE_TRIALS + EXPLICIT_TRIALS;\r\n  let rawTrials;\r\n\r\n  switch (stage) {\r\n    case Phases.TRAINING:\r\n      rawTrials = trial;\r\n      break;\r\n    case Phases.PHASE_1:\r\n      rawTrials = (PHASE_TRIALS / 5) + (EXPLICIT_TRIALS / 3) + trial;\r\n      break;\r\n    case Phases.PHASE_2:\r\n      rawTrials = ((PHASE_TRIALS * 3) / 5) + ((2 * EXPLICIT_TRIALS) / 3) + trial;\r\n      break;\r\n    case Phases.EXPLICIT_1:\r\n      rawTrials = (PHASE_TRIALS / 5) + trial;\r\n      break;\r\n    case Phases.EXPLICIT_2:\r\n      rawTrials = ((PHASE_TRIALS * 3) / 5) + (EXPLICIT_TRIALS / 3) + trial;\r\n      break;\r\n    case Phases.EXPLICIT_3:\r\n      rawTrials = PHASE_TRIALS + ((2 * EXPLICIT_TRIALS) / 3) + trial;\r\n      break;\r\n    default:\r\n      rawTrials = 0;\r\n      break;\r\n  }\r\n  return Math.round(100 * (rawTrials / TOTAL_TRIALS));\r\n};\r\n\r\nexport const calulateCurrentProgress = (stage, trial) => {\r\n  let stageTrials;\r\n\r\n  switch (stage) {\r\n    case Phases.TRAINING:\r\n      stageTrials = PHASE_TRIALS / 5;\r\n      break;\r\n    case Phases.PHASE_1:\r\n      stageTrials = (2 * PHASE_TRIALS) / 5;\r\n      break;\r\n    case Phases.PHASE_2:\r\n      stageTrials = (2 * PHASE_TRIALS) / 5;\r\n      break;\r\n    case Phases.EXPLICIT_1:\r\n      stageTrials = EXPLICIT_TRIALS / 3;\r\n      break;\r\n    case Phases.EXPLICIT_2:\r\n      stageTrials = EXPLICIT_TRIALS / 3;\r\n      break;\r\n    case Phases.EXPLICIT_3:\r\n      stageTrials = EXPLICIT_TRIALS / 3;\r\n      break;\r\n    default:\r\n      stageTrials = 1;\r\n      break;\r\n  }\r\n  return trial > 0 ? Math.round(100 * (trial / stageTrials))\r\n    : trial;\r\n};\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport * as Phases from '../../helpers/phases.js';\r\nimport ProgressBar from '../ProgressBar/ProgressBar.jsx';\r\n\r\nconst Header = ({ stage, trial }) => {\r\n    const INTRODUCTION_TEXT = 'Categorization Game (Experiment)';\r\n    const RESULTS_TITLE = 'Results (selection/correct)';\r\n    return(\r\n        <div className='Header-container'>\r\n            {stage !== Phases.INTRODUCTION &\r\n            stage !== Phases.RESULTS? \r\n            <div className=\"Header-progress\">\r\n                <ProgressBar \r\n                    overall={true} \r\n                    stage={stage} \r\n                    trial={trial} \r\n                />\r\n                <ProgressBar \r\n                    overall={false} \r\n                    stage={stage} \r\n                    trial={trial} \r\n                />\r\n            </div>\r\n            : stage === Phases.INTRODUCTION?\r\n                <h1>{INTRODUCTION_TEXT}</h1>\r\n                :<h1>{RESULTS_TITLE}</h1>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\nimport {INTRODUCTION, TRAINING, RESULTS} from '../../helpers/phases';\r\n\r\nconst Footer = ({ stage, amtFeedback, typeFeedback, stageChange }) => {\r\n    const SUPERVISED = '100%';\r\n    const SEMI_SUPERVISED_HIGH = '50%';\r\n    const SEMI_SUPERVISED_LOW = '25%';\r\n    const UNSUPERVISED = '0%';\r\n    const TRUE_FEEDBACK = 'True';\r\n    const FALSE_FEEDBACK = 'False';\r\n    const RANDOM_FEEDBACK = 'Random';\r\n    const AMT_FEEDBACK = 'Amount of Feedback';\r\n    const TYPE_FEEDBACK = 'Type of Feedback';\r\n    const OVER_EST = 'Over Estimation';\r\n    const UNDER_EST = 'Under Estimation';\r\n    const CORRECT_EST = 'Correct Estimation';\r\n\r\n    let disableInput = stage !== INTRODUCTION;\r\n    const sendFeedbackAmount = () =>{\r\n        let amount = document.querySelector('input[name=\"amount-feedback\"]:checked').value;\r\n        if(amount) amtFeedback(parseInt(amount));\r\n    }\r\n\r\n    const sendFeedbackType = () =>{\r\n        let type = document.querySelector('input[name=\"type-feedback\"]:checked').value;\r\n        if(type) typeFeedback(parseInt(type));\r\n    }\r\n\r\n    const startExperiment = () => {\r\n        stageChange(TRAINING);\r\n    }\r\n\r\n    return(\r\n        <div className={stage===RESULTS? \"Footer-container Footer-results\":\"Footer-container\"}>\r\n            <div className=\"Footer-form\">\r\n                {AMT_FEEDBACK}\r\n                <form style={{color:\"white\"}}>\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"amount-feedback\" \r\n                        value=\"100\" \r\n                        onClick={sendFeedbackAmount} \r\n                        defaultChecked \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {SUPERVISED}\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"amount-feedback\" \r\n                        value=\"50\" \r\n                        onClick={sendFeedbackAmount} \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {SEMI_SUPERVISED_HIGH}\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"amount-feedback\" \r\n                        value=\"25\" \r\n                        onClick={sendFeedbackAmount} \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {SEMI_SUPERVISED_LOW}\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"amount-feedback\" \r\n                        value=\"0\" \r\n                        onClick={sendFeedbackAmount} \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                            {UNSUPERVISED}\r\n                </form>   \r\n            </div>\r\n            <div className=\"feedback-forms\">\r\n                {TYPE_FEEDBACK}\r\n                <form style={{color:\"white\"}}>\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"type-feedback\" \r\n                        value=\"0\" \r\n                        onClick={sendFeedbackType} \r\n                        defaultChecked \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {TRUE_FEEDBACK}\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"type-feedback\" \r\n                        value=\"1\" \r\n                        onClick={sendFeedbackType} \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {FALSE_FEEDBACK}\r\n                    <input \r\n                        className=\"Footer-feedback\" \r\n                        type=\"radio\" \r\n                        name=\"type-feedback\" \r\n                        value=\"2\" \r\n                        onClick={sendFeedbackType} \r\n                        disabled={disableInput}\r\n                    >\r\n                    </input>\r\n                        {RANDOM_FEEDBACK}\r\n                </form>   \r\n            </div>\r\n            {stage === INTRODUCTION? \r\n            <div className=\"Footer-arrow-right\" onClick={startExperiment}></div>:null}\r\n            {stage=== RESULTS?             \r\n            <div className=\"Footer-results-legend\">\r\n                <div \r\n                    className=\"Footer-results-legend-box\" \r\n                    style={{backgroundColor:\"green\"}}\r\n                >\r\n                </div> \r\n                    {OVER_EST}\r\n                <div \r\n                    className=\"Footer-results-legend-box\" \r\n                    style={{backgroundColor:\"red\"}}\r\n                >\r\n                </div> \r\n                    {UNDER_EST}\r\n                <div \r\n                    className=\"Footer-results-legend-box\" \r\n                    style={{backgroundColor:\"black\"}}\r\n                >\r\n                </div> \r\n                    {CORRECT_EST}\r\n            </div>:null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Introduction.css';\r\n\r\nconst Introduction = () => {\r\n    return(\r\n        <div className=\"Introduction-container\">\r\n            <p className=\"Introduction-text\">\r\n                Seymour Scientist mixed up all the health data for two small populations of island people! He needs your help in discerning the difference between \r\n                the two, mostly-homogenous, groups. Correctly categorize islanders so that scientists can better develop a more personalized health intervention \r\n                for people on the islands. Only the silhouettes of the islanders are presented as to hide their true identities (No Peeking!).\r\n                <br></br> <br></br>\r\n                You will see a series of silhouettes denoting islanders. Your task is to categorize each of these islanders as best you can\r\n                by placing them at either island 1 or island 2 (names have been removed for the sake of anonymity). You can either click the island or press the corresponding\r\n                numerical key (e.g., \"1\" or \"2\"). You will also be asked to give your idea of what a representative member of each island would be.\r\n                <br></br><br></br>\r\n                \r\n                Select the <mark>amount of feedback</mark> (how often you want to know if your answer was correct) and <mark>randomization of feedback </mark>\r\n                (mixing up true and false responses to your answers). Start with a training session where you get feedback. Then, embark on a journey of island categorization with your selected amount and type of feedback! \r\n                 Make it all the way through and you can get your results at the end!\r\n                <br></br><br></br><b>No information of any kind is being collected.</b>\r\n\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Introduction;","import React from 'react';\r\nimport {\r\n  WIDTH_MEASURE, MAX_HEIGHT, MIN_HEIGHT, MIN_WIDTH, MAX_WIDTH,\r\n}\r\n  from '../../helpers/IslanderLogic';\r\nimport silhouette from '../../images/silhouette.svg';\r\nimport addSilhouette from '../../images/silhouette-add.svg';\r\nimport removeSilhouette from '../../images/silhouette-remove.svg';\r\n\r\nconst WIDTH_DIF = (MAX_WIDTH - MIN_WIDTH) / 2;\r\nconst HEIGHT_DIF = (MAX_HEIGHT - MIN_HEIGHT) / 2;\r\nconst WIDTH_AVG_BOUND = MIN_WIDTH + WIDTH_DIF;\r\nconst HEIGHT_AVG_BOUND = MIN_HEIGHT + HEIGHT_DIF;\r\nconst ISLAND_1_WIDTH_AVG = WIDTH_AVG_BOUND - Math.floor(WIDTH_DIF / 5.5);\r\nconst ISLAND_2_WIDTH_AVG = WIDTH_AVG_BOUND + Math.floor(WIDTH_DIF / 5.5);\r\nconst ISLAND_1_HEIGHT_AVG = HEIGHT_AVG_BOUND - Math.floor(HEIGHT_DIF / 5.5);\r\nconst ISLAND_2_HEIGHT_AVG = HEIGHT_AVG_BOUND + Math.floor(HEIGHT_DIF / 5.5);\r\nconst STANDARD_HEIGHT = `${(((MAX_HEIGHT - MIN_HEIGHT) / 2) + MIN_HEIGHT) / 2}vmin`;\r\nconst STANDARD_WIDTH = `${(((MAX_WIDTH - MIN_WIDTH) / 2) + MIN_WIDTH) / 2}vmin`;\r\n\r\nclass ResultsParser {\r\n  parseResults(resultsArr, dimension) {\r\n    if (resultsArr.length === 10) {\r\n      const island1Cat = dimension === WIDTH_MEASURE ? ISLAND_1_WIDTH_AVG : ISLAND_1_HEIGHT_AVG;\r\n      const island2Cat = dimension === WIDTH_MEASURE ? ISLAND_2_WIDTH_AVG : ISLAND_2_HEIGHT_AVG;\r\n      const boundary = dimension === WIDTH_MEASURE ? WIDTH_AVG_BOUND : HEIGHT_AVG_BOUND;\r\n\r\n      const p1Island1Avg = Math.round(resultsArr[0]);\r\n      const p1Island2Avg = Math.round(resultsArr[1]);\r\n      const p1ImplBound = ResultsParser.findImplicitBoundary(p1Island1Avg, p1Island2Avg);\r\n      const p2Island1Avg = Math.round(resultsArr[2]);\r\n      const p2Island2Avg = Math.round(resultsArr[3]);\r\n      const p2ImplBound = ResultsParser.findImplicitBoundary(p2Island1Avg, p2Island2Avg);\r\n      const exp1Island1 = Math.round(resultsArr[4]);\r\n      const exp1Island2 = Math.round(resultsArr[5]);\r\n      const exp1bound = Math.round(resultsArr[6]);\r\n      const exp2Island1 = Math.round(resultsArr[7]);\r\n      const exp2Island2 = Math.round(resultsArr[8]);\r\n      const exp2Bound = Math.round(resultsArr[9]);\r\n\r\n      return (\r\n        <div className=\"resultsParser-flex-container\">\r\n          <div className=\"resultsParser-phase-row\">\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Phase- Island 1</h3>\r\n              {this.addSilhouetteImage(island1Cat, p1Island1Avg, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Phase- Island 1</h3>\r\n              {this.addSilhouetteImage(island1Cat, p2Island1Avg, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Choice- Island 1</h3>\r\n              {this.addSilhouetteImage(island1Cat, exp1Island1, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Choice- Island 1</h3>\r\n              {this.addSilhouetteImage(island1Cat, exp2Island1, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Island 1 Average</h3>\r\n              {ResultsParser.addComparisonImage(island1Cat, dimension)}\r\n            </div>\r\n          </div>\r\n          <div className=\"resultsParser-phase-row\">\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Phase- Island 2</h3>\r\n              {this.addSilhouetteImage(island2Cat, p1Island2Avg, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Phase- Island 2</h3>\r\n              {this.addSilhouetteImage(island2Cat, p2Island2Avg, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Choice- Island 2</h3>\r\n              {this.addSilhouetteImage(island2Cat, exp1Island2, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Choice- Island 2</h3>\r\n              {this.addSilhouetteImage(island2Cat, exp2Island2, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Island 2 Average</h3>\r\n              {ResultsParser.addComparisonImage(island2Cat, dimension)}\r\n            </div>\r\n          </div>\r\n          <div className=\"resultsParser-phase-row\">\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Phase- Boundary</h3>\r\n              {this.addSilhouetteImage(boundary, p1ImplBound, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Phase- Boundary</h3>\r\n              {this.addSilhouetteImage(boundary, p2ImplBound, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>First Choice- Boundary</h3>\r\n              {this.addSilhouetteImage(boundary, exp1bound, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Second Choice- Boundary</h3>\r\n              {this.addSilhouetteImage(boundary, exp2Bound, dimension)}\r\n            </div>\r\n            <div className=\"resultsParser-result-item\">\r\n              <h3>Boundary Average</h3>\r\n              {ResultsParser.addComparisonImage(boundary, dimension)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  static findImplicitBoundary(categoryAvg1, categoryAvg2) {\r\n    const categoryDif = Math.abs(categoryAvg1 - categoryAvg2) / 2;\r\n    return categoryAvg1 > categoryAvg2 ? categoryAvg2 + categoryDif : categoryAvg1 + categoryDif;\r\n  }\r\n\r\n  addSilhouetteImage(defaultSize, selectedSize, dimension) {\r\n    const largerSilhouette = ResultsParser.haslargerSilhouette(defaultSize, selectedSize);\r\n    const silhouetteImg = !largerSilhouette\r\n      ? addSilhouette : defaultSize === selectedSize ? silhouette : removeSilhouette;\r\n\r\n    const size = dimension === WIDTH_MEASURE ? {\r\n      width: `${selectedSize / 3}vmin`,\r\n      height: STANDARD_HEIGHT,\r\n    }\r\n      : {\r\n        width: STANDARD_WIDTH,\r\n        height: `${selectedSize / 3}vmin`,\r\n      };\r\n\r\n    const dimText = dimension === WIDTH_MEASURE ? ' wide' : ' tall';\r\n\r\n    return (\r\n      <div className=\"resultsParser-flex-container\">\r\n        <img\r\n          className=\"resultsParser-silhouette\"\r\n          style={size}\r\n          src={silhouetteImg}\r\n          alt=\"silhouette\"\r\n        />\r\n        <p>\r\n          {selectedSize + dimText}\r\n          {' '}\r\n          /\r\n          {defaultSize + dimText}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static addComparisonImage(defaultSize, dimension) {\r\n    const avgSize = dimension === WIDTH_MEASURE ? {\r\n      width: `${defaultSize / 3}vmin`,\r\n      height: STANDARD_HEIGHT,\r\n    }\r\n      : {\r\n        width: STANDARD_WIDTH,\r\n        height: `${defaultSize / 3}vmin`,\r\n      };\r\n\r\n    const dimText = dimension === WIDTH_MEASURE ? ' wide' : ' tall';\r\n\r\n    return (\r\n      <div className=\"resultsParser-flex-container\">\r\n        <img\r\n          className=\"resultsParser-silhouette\"\r\n          style={avgSize}\r\n          src={silhouette}\r\n          alt=\"silhouette\"\r\n        />\r\n        <p>\r\n          {defaultSize + dimText}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static haslargerSilhouette(silhouette1Size, silhouette2Size) {\r\n    return silhouette1Size > silhouette2Size;\r\n  }\r\n}\r\n\r\nexport default ResultsParser;\r\n","import React from 'react';\r\nimport './Results.css';\r\nimport ResultsParser from './resultsParser.jsx';\r\n\r\nconst Results = ({ results, dimension }) =>{\r\n    const parser = new ResultsParser();\r\n    const resultsContent = parser.parseResults(results, dimension);\r\n    return (\r\n        <div className=\"Results-container\">\r\n            {resultsContent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport * as Phases from '../../helpers/phases.js';\r\nimport Introduction from '../Introduction/Introduction';\r\nimport Results from '../Results/Results';\r\n\r\nconst Explanation = ({ stage, dimension, results }) =>{\r\n    return (\r\n        <>\r\n            {stage === Phases.INTRODUCTION? \r\n            <Introduction />:\r\n            <Results \r\n                dimension = {dimension} \r\n                results = {results}\r\n            />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Explanation;","import React from 'react';\r\nimport Display from '../Display/Display';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\nimport Explanation from '../Explanation/Explanation';\r\nimport * as Phases from '../../helpers/phases'; \r\nimport * as Feedback from '../../helpers/feedback';\r\n\r\nimport './Frame.css';\r\n\r\nclass Frame extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n          stage: Phases.INTRODUCTION,\r\n          trial: 0,\r\n          amountFeedback: Feedback.SUPERVISED,\r\n          typeFeedback: 0,\r\n          results:[],\r\n          dimension:0,\r\n          correct:false,\r\n        }\r\n        this.updateAmountFeedback = this.updateAmountFeedback.bind(this);\r\n        this.updateStage = this.updateStage.bind(this);\r\n        this.updateTypeFeedback = this.updateTypeFeedback.bind(this);\r\n        this.updateTrial = this.updateTrial.bind(this);\r\n        this.updateResults = this.updateResults.bind(this);  \r\n    }\r\n\r\n    updateStage(newStage){\r\n        this.setState({\r\n          trial: 0,\r\n          stage:newStage\r\n          });\r\n      }\r\n\r\n    updateTrial(newTrial){\r\n        this.setState({\r\n          trial:newTrial\r\n          });\r\n    }\r\n\r\n    updateAmountFeedback(feedback){\r\n      this.setState({\r\n        amountFeedback:parseInt(feedback)\r\n      });\r\n    }\r\n\r\n    updateTypeFeedback(feedback){\r\n      this.setState({\r\n        typeFeedback:feedback\r\n      });\r\n    }\r\n\r\n    updateResults(results, dimension){\r\n      this.setState({\r\n        stage:Phases.RESULTS,\r\n        results:results,\r\n        dimension: dimension,\r\n      });\r\n    }\r\n  \r\n      render(){\r\n        const { trial, stage, amountFeedback, typeFeedback, dimension, results } = this.state;\r\n        return (\r\n              <div>\r\n                <Header \r\n                  trial={trial} \r\n                  stage={stage}\r\n                />\r\n                {stage !== Phases.INTRODUCTION &\r\n                stage !== Phases.RESULTS?\r\n                <Display \r\n                  stage = {stage} \r\n                  updateResults={this.updateResults} \r\n                  updateTrial={this.updateTrial} \r\n                  updateStage={this.updateStage} \r\n                  trial={trial} \r\n                  feedbackAmount={amountFeedback} \r\n                  typeFeedback={typeFeedback}\r\n                />\r\n                :<Explanation \r\n                  stage = {stage} \r\n                  dimension={dimension} \r\n                  results={results}\r\n                />}\r\n                <Footer \r\n                  stage = {stage} \r\n                  typeFeedback={this.updateTypeFeedback} \r\n                  amtFeedback={this.updateAmountFeedback} \r\n                  stageChange={this.updateStage}\r\n                />\r\n              </div>\r\n        );\r\n      }\r\n  }\r\n\r\n  \r\n  export default Frame;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Frame from './component/Frame/Frame';\r\n\r\nReactDOM.render(<Frame />, document.querySelector('#root'));\r\n"],"sourceRoot":""}